#%%
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame with the data
# You may need to preprocess your data to select only numeric columns
# For demonstration purposes, let's assume you have selected relevant numeric columns
df = pd.read_csv(r"C:\Users\user\Desktop\baseballdata\data2023.csv")
year = '2023'

df = df.groupby("pitch_type").get_group("FF")
# Create a DataFrame with selected numeric columns
numeric_columns = ['hit_distance_sc', 'estimated_woba_using_speedangle','woba_value',\
'launch_speed', 'launch_angle', 'plate_x', 'plate_z',\
'effective_speed', 'release_speed'                
]
numeric_df = df[numeric_columns]

# calculate correlation matrix
correlation_matrix = numeric_df.corr()

# plot heatmap 
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title(year)
plt.xticks(rotation=45, ha='right')
plt.show()
#%%




####################################
#%%
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import csv
import fractions
import itertools
import collections
from fractions import Fraction as F

df23 = pd.read_csv(r"C:\Users\user\Desktop\baseballdata\data2023.csv")
df22 = pd.read_csv(r"C:\Users\user\Desktop\baseballdata\data2022.csv")

limited_index = 'plate_x'

df23 = df23.groupby("pitch_type").get_group("FF")
df22 = df22.groupby("pitch_type").get_group("FF")

df23 = df23[df23[limited_index] > 0]
df22 = df22[df22[limited_index] > 0]

df = pd.DataFrame({'2022': df22[limited_index],\
            '2023': df23[limited_index]})
'''
Q1 = df23[limited_index].quantile(0.25)
Q3 = df23[limited_index].quantile(0.75)
IQR = Q3-Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

df23 = df23.dropna(subset=[limited_index] )
df22 = df22.dropna(subset=[limited_index])

df23 = df23[(df23[limited_index] >= lower_bound)\
            & (df23[limited_index] <= upper_bound)]
df22 = df22[(df22[limited_index] >= lower_bound)\
            & (df22[limited_index] <= upper_bound)]
'''

# Melt the DataFrame to long format
df_melted = pd.melt(df)

# Plot box plot
sns.boxplot(y='variable', x='value', data=df_melted)
plt.text(0.5, -0.15, limited_index, size=10, ha="center", transform=plt.gca().transAxes)

print(df22[limited_index].describe())
print(df23[limited_index].describe())
# %%
