
#%%
pip install numpy matplotlib scikit-learn
#%%
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm

# Load your dataset (replace 'data.csv' with your actual file name)
df = pd.read_csv(r"C:\Users\user\Desktop\baseballdata\merge.csv")

# Fill NaN values with 0
df.fillna(0, inplace=True)

# Select two columns for regression analysis
x_column = 'launch_angle'  
y_column = 'hit_distance_sc'   

# Extract the selected columns as numpy arrays
x = df[x_column].values.reshape(-1, 1)
y = df[y_column].values.reshape(-1, 1)

# Add a constant term to the predictor variable for the intercept
x = sm.add_constant(x)

# Fit the linear regression model
model = sm.OLS(y, x).fit()



# Print regression equation, R^2, and p-value
print("Regression Equation:")
print(f"{y_column} = {model.params[0]:.2f} + {model.params[1]:.2f} * {x_column}")
print("\nR-squared:", model.rsquared)
print("\nP-value for the coefficient of", x_column, ":", model.pvalues[1])
print("\nAlpha-value", x_column, ":", model.params[0])
# Predict y values
y_pred = model.predict(x)

# Plot the data and the linear regression line
plt.scatter(df[x_column], df[y_column], color='blue', label='Data')
plt.plot(df[x_column], y_pred, color='red', label='Linear Regression')
plt.xlabel(x_column)
plt.ylabel(y_column)
plt.title('Linear Regression Analysis')
plt.legend()
plt.show()
fdsaf

#%%